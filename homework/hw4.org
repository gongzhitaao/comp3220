#+TITLE: PPL -- Homework 4
#+SETUPFILE: setup.org
#+DATE: Due on Nov 3

#+BEGIN_abstract
Homework 4 covers subprogram design and implementation issues.
#+END_abstract

* Parameter-Passing Method

  1. (*30 points*) Consider the following =C++= snippet.

     #+ATTR_LATEX: :options fontsize=\small
     #+BEGIN_SRC C++
void swap(int a, int b)
{
  int tmp = a;
  a = b;
  b = tmp;
}

int main()
{
  int val = 2;
  int arr[] = {1, 3, 5, 7, 9};

  swap(val, arr[0]);
  swap(arr[0], arr[1]);
  swap(val, arr[val]);
}
     #+END_SRC

     What are the values of {{{src_cpp(val)}}} and {{{src_cpp(arr)}}}
     after each call to {{{src_cpp(swap)}}} respectively if assuming
     #+ATTR_LATEX: :environment enumerate*
     1) pass by value,
     2) pass by reference,
     3) pass by value-result.

  2. (*30 points*) Consider the following =C++= snippet.

     #+ATTR_LATEX: :options fontsize=\small
     #+BEGIN_SRC C++
#include <cstdio>

int n;

void foo(int k)
{
  n += 1;
  k += 4;
  printf("%d\n", n);
}

int main()
{
  n = 0;
  foo(n);
  printf("%d\n", n);
}
     #+END_SRC

     What are the outputs respectively if assuming
     #+ATTR_LATEX: :environment enumerate*
     1) pass by value,
     2) pass by reference,
     3) pass by value-result.

  3. (*20 points*) Consider the following =Javascript= code snippet.

     #+ATTR_LATEX: :options fontsize=\small
     #+BEGIN_SRC js
var n;

function foo(k) {
  console.log(k);               // print k
  n += 1;
  console.log(k);               // print k
}

n = 0;
foo(n + 10);
     #+END_SRC

     What are the outputs respectively if assuming
     #+ATTR_LATEX: :environment enumerate*
     1) pass by value,
     2) pass by name.

  4. (*10 points*) What are at least two arguments against the use of
     pass-by-name parameters?

* Nested Subprogram

  2. (*10 points*) Speculate on the issue of allowing nested
     subprograms in programming languages -- why are they not allowed
     in many contemporary languages?
