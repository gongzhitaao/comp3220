#+TITLE: PPL -- BNF
#+SETUPFILE: ../setup.org

#+BEGIN_abstract
We describe the syntax of programming languages with BNF and /e/-BNF.
#+END_abstract

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: sec:introduction
  :END:

  First of all, let's meet the jargons.

* BNF
  :PROPERTIES:
  :CUSTOM_ID: sec:bnf
  :END:

  BNF, short for /Backus Normal Form/ or /Backusâ€“Naur Form/, is a
  metalanguage used to describe other languages, including itself.
  The following snippet shows one possible representation of BNF
  syntax by itself \cite{wiki:bnf}.

  #+BEGIN_SRC bnf
<syntax>         ::= <rule> | <rule> <syntax>
<rule>           ::= <opt-whitespace> "<" <TEXT> ">" <opt-whitespace> "::=" <opt-whitespace> <expression> <line-end>
<opt-whitespace> ::= " " <opt-whitespace> | ""
<expression>     ::= <list> | <list> "|" <expression>
<line-end>       ::= <opt-whitespace> <EOL> | <line-end> <line-end>
<list>           ::= <term> | <term> <opt-whitespace> <list>
<term>           ::= <literal> | "<" <TEXT> ">"
<literal>        ::= "'" <TEXT> "'"
  #+END_SRC

  BNF represention, as seen above, is actually a collection of
  derivation rules, where the left-hand-side (LHS) may be replaced by
  the right-hand-side (RHS).  Symbols that appear on LHS are
  /nonterminals/, e.g., =<syntax>=, =<rule>= and etc.  And symbols
  that never appears on LFS are /terminals/, e.g., =<TEXT>= and
  =<EOL>=.  Terminal, as its name suggests, is the elementary symbols
  of the languages being represented.  It may not be changed by the
  derivation rules, since it never appears on the LHS.  These
  terminals are defined in specific languages which BNF describes.

  The symbol "|" means logic /OR/.  A nonterminal may have multiple
  derivation rules, which can be written separately or joined together
  with "|" as seen above.  The =<syntax>= representation can be also
  written as

  #+BEGIN_SRC bnf
<syntax> ::= <rule>
<syntax> ::= <rule> <syntax>
  #+END_SRC

  Note that the rule may be ambiguous, which will be discussed in
  detail in Section [[#sec:parse-tree]].

** Relationship with CFG

   CFG, short for context-free grammar, which is a formal grammer in
   formal language theory.  Usually is it defined by a 4-tuple, see
   \cite{wiki:cfg}.  BNF is popular notation of CFG.  In other words,
   they are doing the same thing.

* Parse Tree
  :PROPERTIES:
  :CUSTOM_ID: sec:parse-tree
  :END:

* Reference

#+BIBLIOGRAPHY: ref plain

-----
