#+TITLE: PPL -- Term Project
#+SETUPFILE: ../setup.org

#+MACRO: BF @@html: Brainf**k@@

-----

#+BEGIN_abstract
Write a simple interpreter for [[http://www.muppetlabs.com/~breadbox/bf/][{{{BF}}}]].
#+END_abstract

#+TOC: headlines: 2

* Introduction

  A {{{BF}}} program has an implicit byte pointer, called *the
  pointer*, which is free to move around within an array of *30000*
  bytes, initially all set to zero.  The pointer itself is initialized
  to point to the beginning of this array.

  The Brainfuck programming language consists of eight commands, each
  of which is represented as a single character.

  - =>= Increment /the pointer/.
  - =<= Decrement /the pointer/.
  - =+= Increment the byte at /the pointer/.
  - =-= Decrement the byte at /the pointer/.
  - =.= A dot, output the byte at /the pointer/.
  - @@html:<code>,</code>@@ A comma, input a byte and store it in the
    byte at /the pointer/.
  - =[= Jump forward past the matching =]= IF the byte at /the
    pointer/ is zero.
  - =]= Jump backward to the matching =[= UNLESS the byte at /the
    pointer/ is zero.


  For example, one version of the famous "Hello, World!" program in
  {{{BF}}} is

  #+BEGIN_EXAMPLE
++++++++++[>+++++++>++++++++++>+++>+<<<<-]>++.>+.+++++++..+++.>++.<<+++++++++++++++.>.+++.------.--------.>+.>.
  #+END_EXAMPLE

* Requirement

  - Accepted languages ::
       =C++=, =Python= and =Javascript=.  Note that =Java= is not
       an option any more.  Reason?  Sorry but I don't like =Java=.
  - Deliverable ::
       Put all our source files in a zip file, named
       *=your_auburn_username.zip=*, e.g., =zzg0009.zip=.
  - Submission ::
       Submit on Canvas before deadline.  /LATE SUBMISSION IS NOT
       ACCEPTED/.

** Test Program

   I will use program to test and grade your code in batch.  So please
   double check your function signature.  Failure to run properly may
   impact your project grade.  The entry function will all have the
   name =interprete=.  And you may implement as many other helper
   functions as you want.  The following sections ellaborate on the
   specifications.

*** C++

    I would use C++11 (=g++ -std=c++11 ...=) to test your program.  So
    feel free to employ some of the recent goodies added to C++, e.g.,
    lambda function, array initialization, etc.  For convenience,
    please separate your declaration and implementation code in =bf.h=
    and =bf.cpp=.  The function signature is

    #+BEGIN_SRC C++
std::string interprete(const std::string &src, const std::string &input = "");
    #+END_SRC

    My test program would look like

    #+BEGIN_SRC C++
#include <iostream>
#include "bf.h"

int main()
{
  std::cout << interprete("+.") << std::endl;      // output: 1
  std::cout << interprete(",.", "2") << std::endl; // output: 2

  return 0;
}
    #+END_SRC

*** Python

    I would test your program with Python3.  So please make sure that
    you test your program with the correct version of Python.  Please
    include all your implementation in =bf.py=.  The function
    signature is

    #+BEGIN_SRC python
def interprete(src, inp=None):
    pass
    #+END_SRC

    The test program would look like

    #+BEGIN_SRC python
import bf as bf

print(bf.interprete("+."))      # output: 1
print(bf.interprete(",.", "2")) # output: 2
    #+END_SRC

*** Javascript

    Please include all your implementation in =bf.js=.  The function
    signature is

    #+BEGIN_SRC js
module.exports = {
    interprete: function(src, inp) {
    }
};
    #+END_SRC

    The test program would look like

    #+BEGIN_SRC js
var bf = require("./bf");

console.log(bf.interprete("+."));      // output: 1
console.log(bf.interprete(",.", "2")); // output: 2
    #+END_SRC

-----
