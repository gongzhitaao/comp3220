#+TITLE: PPL -- Preliminary
#+SETUPFILE: ../setup.org

* Benefits
  :PROPERTIES:
  :CUSTOM_ID: sec:benefits
  :ID:       479bfac4-85d4-4b9e-a34f-60a29fd32503
  :END:

  - Increased ability to express ideas
  - Choosing appropriate languages
  - Increased ability to learn new languages
  - Better understanding of implementation
  - Better use of knowledge of already known

* Programming Domains
  :PROPERTIES:
  :CUSTOM_ID: sec:programming-domains
  :ID:       28da44d1-0c5d-4024-aa20-341d00a3c59e
  :END:

  - Scientific computing ::
       Fortran, Python, Julia, Lua, etc.
  - Artificial Intelligence ::
       LISP, Python, Lua
  - Systems Programming ::
       ASM, C/C++
  - Web Development ::
       LAMP, nodejs, Python script, etc.
  - Many others ::

* Language Evaluation Criteria
  :PROPERTIES:
  :CUSTOM_ID: sec:language-evaluation-criteria
  :ID:       de6843e7-69ac-46aa-acb0-afdad6afeea4
  :END:

  - Readability
  - Writability
  - Reliability
  - Cost
  - Portability
  - Generality
  - Well-defined

** Example -- Readability/Writability
   :PROPERTIES:
   :ID:       34f3a686-6c6a-4684-8e7c-436937522291
   :END:

   Java reads a file.

   #+BEGIN_SRC java
BufferedReader br = new BufferedReader(
                      new InputStreamReader(
                        new FileInputStream(
                          new File("file.txt"))));
String line = null;
while ((line = br.readLine()) != null)
    ;                           // read line by line
   #+END_SRC

   Python reads a file.

   #+BEGIN_SRC python
with open("file.txt") as fin:
    for line in fin:
        pass                    # read line by line
   #+END_SRC

** Example -- Reliability
   :PROPERTIES:
   :ID:       27f325b5-41d1-4901-aa40-43afc95e58d6
   :END:

   Type Checking -- Lint tool\\
   Exception Handling

   #+BEGIN_SRC python
try:
    with open("file.txt") as fin:
        pass
except IOError:
    pass
   #+END_SRC

** Example -- Portability & Generality
   :PROPERTIES:
   :ID:       101e6f03-80da-4b3c-a683-21d4a84d1a5d
   :END:

   - Javascript :: Web server/client side, visualization, general
        programming with Nodejs
   - Python :: Web server script, scientific computing, machine
        learning/artificial intelligence, general programming,

* Influences on Language Design
  :PROPERTIES:
  :CUSTOM_ID: sec:influences-on-language-design
  :ID:       0a45ece8-d428-4e25-b960-e9f0d8f152d6
  :END:

  - Architecture
  - Programming Methodologies

** Computer Architecture
   :PROPERTIES:
   :CUSTOM_ID: sec:computer-architecture
   :ID:       df09a9ac-981f-40b6-bcff-e691e5b88d31
   :END:

   #+ATTR_HTML: :width 600px
   [[./img/von-neumann-arch.svg]]

   This is /Von Neumann/ architecture.  First /Fetch/ intsruction and
   data from memory and then /Execute/.

** Programming Methodologies
   :PROPERTIES:
   :CUSTOM_ID: programming-methodologies
   :ID:       810d1a8d-ae56-41b0-9913-1a7de878db7b
   :END:

   - 50s and 60s, machine efficiency
   - late 60s, people efficiency
   - late 70s, process-oriented to data-oriented
   - mid 80s, OOP


* Language Category
  :PROPERTIES:
  :CUSTOM_ID: sec:language-category
  :ID:       864aec81-a5a5-4e28-995d-b8476e1d7d87
  :END:

  [[https://en.wikipedia.org/wiki/List_of_programming_languages_by_type][List of programming languages by type on Wikipedia.]]

* Implementation Method
  :PROPERTIES:
  :CUSTOM_ID: sec:implementation-method
  :ID:       88258e19-d47c-4fcf-87b7-455c10c84901
  :END:

  - Compilation ::
       Souce code are /translated/ to machine language
  - Interpretation ::
       Souce code are /interpreted/ by /interpreter/

** Layered View
   :PROPERTIES:
   :CUSTOM_ID: sec:layered-view
   :ID:       7575ce71-e838-4771-b1a8-5e86cfa59f9b
   :END:

   #+ATTR_HTML: :height 260px
   [[./img/layered-view.svg]]

** Whole Compilation

   #+ATTR_HTML: :height 200px
   [[./img/whole-compile-process.svg]]

** Whole Compilation Example

   #+ATTR_HTML: :height 260px
   [[./img/whole-compile-process-cpp.svg]]

** Whole Compilation Example

   #+BEGIN_SRC c++
#include <stdio.h>

#define foo(A, B) ((A) > (B) ? (A) : (B))

int main()
{
  // I'm a comment
  int a = foo(3, 4);
  printf("%d\n", a);
}
   #+END_SRC

** Whole Compilation Example

   After Preprocessing (=cpp test.c > test.i=)...

   #+BEGIN_SRC c++
/* The whole content of stdio.h will be included here. */

int main()
{

  int a = ((3) > (4) ? (3) : (4));
  printf("%d\n", a);
  return 0;
}
   #+END_SRC

** Whole Compilation Example

   After compile (=gcc -S test.i=)...

   #+BEGIN_SRC asm
	.file	"test.c"
	.section	.rodata
.LC0:
	.string	"%d\n"
	.text
	.globl	main
	.type	main, @function
main:
.LFB0:
	.cfi_startproc
	pushq	%rbp
  ;; more code goes on here
.LFE0:
	.size	main, .-main
	.ident	"GCC: (Ubuntu 4.9.2-10ubuntu13) 4.9.2"
	.section	.note.GNU-stack,"",@progbits

   #+END_SRC

** Whole Compilation Example

   After assembling (=as -o test.o test.s=)

   #+BEGIN_SRC hexl
00000000: 7f45 4c46 0201 0100 0a                   .ELF.....
   #+END_SRC

   You will see the binary code here.  With =file= command, you could
   see that

   #+BEGIN_EXAMPLE
> file test.o
test.o: ELF 64-bit LSB relocatable
   #+END_EXAMPLE

** While Compilation Example

   After linking (=ld -o test test.o -lc --entry main <and other
   libs>=)

   #+BEGIN_EXAMPLE
> file test
test: ELF 64-bit LSB executable
   #+END_EXAMPLE

** While Compilation Example

   All in One!

   #+ATTR_HTML: :height 200px
   [[./img/whole-process-simplified.svg]]

   All you need is =gcc -o test test.c=.

** Compile

   #+ATTR_HTML: :height 380px
   [[./img/compile-process.svg]]

** Interpretation

   #+ATTR_HTML: :width 400px
   [[./img/interprete-process.svg]]

   Very straightfoward and easy to debug, suitable for prototype,
   albeit slower.

   Javascript, Python, Lisp, etc. all belongs to this family.

** Byte Compilation

   #+ATTR_HTML: :height 400px
   [[./img/byte-compile-process.svg]]

   Python, Lisp etc.

* COMMENT Make Images

  #+BEGIN_SRC emacs-lisp :results silent
(async-start-process "make" "make" nil)
  #+END_SRC
